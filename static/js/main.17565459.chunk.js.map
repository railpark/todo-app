{"version":3,"sources":["components/TodoTemplate.js","components/TodoInsert.js","components/TodoListItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoTemplate","children","className","TodoInsert","onInsert","useState","value","setValue","onChange","useCallback","e","target","onSubmit","preventDefault","placeholder","type","TodoListItem","todo","onRemove","onToggle","id","text","checked","cn","onClick","TodoList","todos","map","key","createBulkTodos","array","i","push","App","setTodos","nextId","useRef","current","concat","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+SAYeA,G,MATM,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACtB,OACE,yBAAKC,UAAU,gBACb,yBAAKA,UAAU,aAAf,6BACA,yBAAKA,UAAU,WAAWD,M,OC8BjBE,G,MAjCI,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACTC,mBAAS,IADA,mBAC5BC,EAD4B,KACrBC,EADqB,KAG7BC,EAAWC,uBAAY,SAAAC,GAC3BH,EAASG,EAAEC,OAAOL,SACjB,IAEGM,EAAWH,uBACf,SAAAC,GACEN,EAASE,GACTC,EAAS,IAITG,EAAEG,mBAEJ,CAACT,EAAUE,IAGb,OACE,0BAAMJ,UAAU,aAAaU,SAAUA,GACrC,2BACEE,YAAY,qDACZR,MAAOA,EACPE,SAAUA,IAEZ,4BAAQO,KAAK,UACX,kBAAC,IAAD,U,gBCFOC,G,MApBM,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,SAC9BC,EAAqBH,EAArBG,GAAIC,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,QAEjB,OAEI,yBAAKpB,UAAU,gBACb,yBAAKA,UAAWqB,IAAG,WAAY,CAAED,YAC/BE,QAAS,kBAAML,EAASC,KACvBE,EAAU,kBAAC,IAAD,MAAiB,kBAAC,IAAD,MAC5B,yBAAKpB,UAAU,QAAQmB,IAEzB,yBAAKnB,UAAU,SAASsB,QAAS,kBAAMN,EAASE,KAC9C,kBAAC,IAAD,UCFKK,G,MAfE,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,MAAOR,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAElC,OACE,yBAAKjB,UAAU,YACZwB,EAAMC,KAAI,SAAAV,GAAI,OACb,kBAAC,EAAD,CACEA,KAAMA,EACNW,IAAKX,EAAKG,GACVF,SAAUA,EACVC,SAAUA,UCRpB,SAASU,IAEP,IADA,IAAMC,EAAQ,GACLC,EAAI,EAAGA,GAAK,KAAMA,IACzBD,EAAME,KAAK,CACTZ,GAAIW,EACJV,KAAK,iBAAD,OAASU,GACbT,SAAS,IAGb,OAAOQ,EAGT,IAqCeG,EArCH,WAAO,IAAD,EACU5B,mBAASwB,GADnB,mBACTH,EADS,KACFQ,EADE,KAGVC,EAASC,iBAAO,MAEhBhC,EAAWK,uBAAY,SAAAY,GAC3B,IAAMJ,EAAO,CACXG,GAAIe,EAAOE,QACXhB,OACAC,SAAS,GAEXY,EAASR,EAAMY,OAAOrB,IACtBkB,EAAOE,SAAW,IAClB,CAACX,IAEGR,EAAWT,uBAAY,SAAAW,GAC3Bc,EAASR,EAAMa,QAAO,SAAAtB,GAAI,OAAIA,EAAKG,KAAOA,QAE5C,CAACM,IAEKP,EAAWV,uBAAY,SAAAW,GAC3Bc,GAAS,SAAAR,GAAK,OACZA,EAAMC,KAAI,SAAAV,GAAI,OACZA,EAAKG,KAAOA,EAAZ,eAAsBH,EAAtB,CAA4BK,SAAUL,EAAKK,UAAYL,UAG1D,CAACS,IAGJ,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAYtB,SAAUA,IACtB,kBAAC,EAAD,CAAUsB,MAAOA,EAAOR,SAAUA,EAAUC,SAAUA,MCrCxCqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.17565459.chunk.js","sourcesContent":["import React from 'react';\r\nimport './TodoTemplate.scss';\r\n\r\nconst TodoTemplate = ({ children }) => {\r\n  return (\r\n    <div className=\"TodoTemplate\">\r\n      <div className=\"app-title\">일정 관리</div>\r\n      <div className=\"content\">{children}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoTemplate;","import React, { useState, useCallback } from 'react';\r\nimport { MdAdd } from 'react-icons/md';\r\nimport './TodoInsert.scss';\r\n\r\nconst TodoInsert = ({ onInsert }) => {\r\n  const [value, setValue] = useState('');\r\n\r\n  const onChange = useCallback(e => {\r\n    setValue(e.target.value);\r\n  }, []);\r\n\r\n  const onSubmit = useCallback(\r\n    e => {\r\n      onInsert(value);\r\n      setValue(''); // value 값 초기화\r\n\r\n      // submit 이벤트는 브라우저에서 새로고침을 발생시킵니다.\r\n      // 이를 방지하기 위하여 이 함수를 호출합니다.\r\n      e.preventDefault();\r\n    },\r\n    [onInsert, value],\r\n  );\r\n\r\n  return (\r\n    <form className=\"TodoInsert\" onSubmit={onSubmit}>\r\n      <input\r\n        placeholder=\"할 일을 입력하세요\"\r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n      <button type=\"submit\">\r\n        <MdAdd />\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default TodoInsert;\r\n","import React from 'react';\r\nimport {\r\n  MdCheckBoxOutlineBlank,\r\n  MdCheckBox,\r\n  MdRemoveCircleOutline,\r\n} from 'react-icons/md';\r\nimport cn from 'classnames';\r\nimport './TodoListItem.scss';\r\n\r\nconst TodoListItem = ({todo, onRemove, onToggle}) => {\r\n  const {id, text, checked} = todo;\r\n  \r\n  return (\r\n \r\n      <div className=\"TodoListItem\">\r\n        <div className={cn('checkbox', { checked })}\r\n          onClick={() => onToggle(id)} >\r\n          {checked ? <MdCheckBox /> : <MdCheckBoxOutlineBlank />}\r\n          <div className=\"text\">{text}</div>\r\n        </div>\r\n        <div className=\"remove\" onClick={() => onRemove(id)}>\r\n          <MdRemoveCircleOutline />\r\n        </div>\r\n      </div>\r\n    \r\n    \r\n  );\r\n};\r\n\r\nexport default TodoListItem;\r\n","import React from 'react';\r\nimport TodoListItem from './TodoListItem';\r\nimport './TodoList.scss';\r\n\r\nconst TodoList = ({todos, onRemove, onToggle }) => {\r\n\r\n  return (\r\n    <div className=\"TodoList\">\r\n      {todos.map(todo => (\r\n        <TodoListItem \r\n          todo={todo} \r\n          key={todo.id} \r\n          onRemove={onRemove} \r\n          onToggle={onToggle} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import React,{ useRef, useState, useCallback } from 'react';\r\nimport TodoTemplate from './components/TodoTemplate';\r\nimport TodoInsert from './components/TodoInsert';\r\nimport TodoList from './components/TodoList';\r\n\r\nfunction createBulkTodos() {\r\n  const array = [];\r\n  for (let i = 1; i <= 2500; i++) {\r\n    array.push({\r\n      id: i,\r\n      text: `할 일 ${i}`,\r\n      checked: false,\r\n    });\r\n  }\r\n  return array;\r\n}\r\n\r\nconst App = () => {\r\n  const [todos, setTodos] = useState(createBulkTodos);\r\n  \r\n  const nextId = useRef(2501);\r\n\r\n  const onInsert = useCallback(text => {\r\n    const todo = {\r\n      id: nextId.current,\r\n      text,\r\n      checked: false,\r\n    };\r\n    setTodos(todos.concat(todo));\r\n    nextId.current += 1; // nextId 1 씩 더하기\r\n  },[todos],\r\n  );\r\n  const onRemove = useCallback(id => {\r\n    setTodos(todos.filter(todo => todo.id !== id));\r\n  }, \r\n  [todos], );\r\n\r\n  const onToggle = useCallback(id => {\r\n    setTodos(todos =>\r\n      todos.map(todo =>\r\n        todo.id === id ? { ...todo, checked: !todo.checked } : todo,\r\n      ),\r\n    );\r\n  }, [todos]);\r\n  \r\n\r\n  return (\r\n    <TodoTemplate>\r\n      <TodoInsert onInsert={onInsert} />\r\n      <TodoList todos={todos} onRemove={onRemove} onToggle={onToggle} />\r\n    </TodoTemplate>\r\n  );    \r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}